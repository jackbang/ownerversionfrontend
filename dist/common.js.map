{"version":3,"file":"common.js","sources":["webpack:///./src/const/status.js","webpack:///./src/img/female.png","webpack:///./src/img/image-10.png","webpack:///./src/img/image-13.png","webpack:///./src/img/image-8.png","webpack:///./src/img/male.png","webpack:///./src/img/queueinfobk.png","webpack:///./src/img/scoreActive.png","webpack:///./src/service/api.js","webpack:///./src/service/config.js","webpack:///./src/service/request.js"],"sourcesContent":["export const HTTP_STATUS = {\r\n    SUCCESS: 200,\r\n    CLIENT_ERROR: 400,\r\n    AUTHENTICATE: 401,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    SERVER_ERROR: 500,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504\r\n}\r\n\r\n  // promise status\r\nexport const SUCCESS = { success:'success'}\r\nexport const FAIL = { fail:'fail'}\r\nexport const COMPLETE = { complete:'complete'}\r\n \r\nexport const PROMISE_STATUS = {\r\n  success: 'success',\r\n  fail: 'fail',\r\n  complete: 'complete'\r\n}\r\n \r\nexport const RESULT_STATUS = {\r\n  SUCCESS:0,\r\n  SIGNATURE_FAILED: 1000  // 签名失败\r\n}","module.exports = __webpack_public_path__ + \"img/female.png\";","module.exports = __webpack_public_path__ + \"img/image-10.png\";","module.exports = __webpack_public_path__ + \"img/image-13.png\";","module.exports = __webpack_public_path__ + \"img/image-8.png\";","module.exports = __webpack_public_path__ + \"img/male.png\";","module.exports = __webpack_public_path__ + \"img/queueinfobk.png\";","module.exports = __webpack_public_path__ + \"img/scoreActive.png\";","import { render } from '_@tarojs_taro@3.2.1@@tarojs/taro';\r\nimport request from './request'\r\n\r\nexport const test_wechat_login = (user_data) => {\r\n    //let url = `/test/onlogin?code=${code_data}`\r\n    let url = '/test/adminLogin'\r\n    return request.post(url, user_data, 'application/json')\r\n}\r\n\r\nexport const test_send_sms = (admin_data) => {\r\n    let url = '/test/adminSendSMS'\r\n    return request.post(url, admin_data, 'application/json')\r\n}\r\n\r\nexport const test_get_queues = (store_id) => {\r\n    let url = `/test/stores/${store_id}/queues/`\r\n    return request.get(url, '')\r\n}\r\n\r\nexport const test_total_plays_search = (body, params) => {\r\n    let url = `/test/total/search?`+params\r\n    return request.get(url, body)\r\n}\r\n","//export const base = \"http://121.4.174.114\";\r\nexport const base = \"https://api.ecou.com.cn\";\r\n\r\nexport const map_KEY = \"5Z7BZ-62GRX-YGF4I-ZUAQM-SI4JZ-WFF4G\";","import Taro from '@tarojs/taro'\r\nimport { FAIL, HTTP_STATUS } from '../const/status'\r\nimport { base } from './config'\r\n\r\nconst token = ''\r\n\r\nexport default {\r\n    baseOptions(params, method) {\r\n        let { url, data } = params\r\n        // let token = getApp().globalData.token\r\n        // if (!token) login()\r\n        let contentType = 'application/json'\r\n        contentType = params.contentType || contentType;\r\n        const option = {\r\n            isShowLoading: false,\r\n            loadingText: '正在加载',\r\n            url: base + url,\r\n            data: data,\r\n            method: method,\r\n            dataType: \"json\",\r\n            header: { 'content-type': contentType },\r\n            success(res) {\r\n                if (res.statusCode === HTTP_STATUS.NOT_FOUND) {\r\n                    return Promise.reject({ desc: '请求资源不存在' })\r\n                } else if (res.statusCode === HTTP_STATUS.BAD_GATEWAY) {\r\n                    return Promise.reject({ desc: \"服务端出现了问题\" })\r\n                } else if (res.statusCode === HTTP_STATUS.FORBIDDEN) {\r\n                    return Promise.reject({ desc: \"没有权限访问\" });\r\n                } else if (res.statusCode === HTTP_STATUS.SUCCESS) {\r\n                    console.log(res.data)\r\n                    return res.data\r\n                }\r\n            },\r\n            fail(res) {\r\n                console.log('HTTP request failed!')\r\n            }\r\n        }\r\n        console.log('options: ', option)\r\n        return Taro.request(option)\r\n    },\r\n    get(url, data) {\r\n        let option = { url, data }\r\n        return this.baseOptions(option, 'GET')\r\n    },\r\n    post(url, data, contentType) {\r\n        let params = { url, data, contentType };\r\n        return this.baseOptions(params, \"POST\")\r\n    }\r\n}"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;ACvBA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAzCA;;;;A","sourceRoot":""}